{"version":3,"sources":["redux/actions/cartActions.js","redux/actions/actionTypes.js","components/cart/CartSummary.js","components/navi/Navi.js","redux/actions/categoryActions.js","redux/actions/productActions.js","components/categories/CategoryList.js","components/products/ProductList.js","components/root/Dashboard.js","components/cart/CartDetail.js","components/root/App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/changeCategoryReducer.js","redux/reducers/categoryListReducer.js","redux/reducers/productListReducer.js","redux/reducers/cartReducer.js","index.js","redux/reducers/configureStore.js"],"names":["addToCart","cartItem","type","payload","removeFromCart","product","CartSummary","this","props","actions","alertify","error","productName","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","cart","map","DropdownItem","key","id","Badge","color","onClick","quantity","divider","to","length","renderSummary","renderEmpty","Component","connect","state","cartReducer","dispatch","bindActionCreators","cartActions","Navi","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","className","changeCategory","category","getCategories","fetch","then","response","json","result","getProducts","categoryId","url","CategoryList","selectCategory","ListGroup","categories","ListGroupItem","active","currentCategory","categoryName","changeCategoryReducer","categoryListReducer","categoryAction","productAction","ProductList","success","Table","products","scope","Button","productListReducer","Dashboard","Row","Col","xs","CartDetail","window","open","App","Container","path","exact","component","Boolean","location","hostname","match","rootReducer","combineReducers","initialState","action","addedItem","find","c","newState","Object","assign","newState2","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9df41dd2.chunk.js","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function addToCart(cartItem) {\r\n  return { type: actionTypes.ADD_TO_CART, payload: cartItem };\r\n}\r\n\r\nexport function removeFromCart(product) {\r\n    return { type: actionTypes.REMOVE_FROM_CART, payload: product };\r\n  }\r\n\r\n","export const CHANGE_CATEGORY = \"CHANGE_CATEGORY\"\r\nexport const GET_CATEGORIES_SUCCESS = \"GET_CATEGORIES_SUCCESS\"\r\nexport const GET_PRODUCTS_SUCCESS=\"GET_PRODUCTS_SUCCESS\"\r\nexport const ADD_TO_CART = \"ADD_TO_CART\"\r\nexport const REMOVE_FROM_CART=\"REMOVE_FROM_CART\"","import React, { Component } from \"react\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavItem,\r\n  NavLink,\r\n  Badge\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as cartActions from \"../../redux/actions/cartActions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport alertify from \"alertifyjs\";\r\n\r\nclass CartSummary extends Component {\r\n  removeFromCart(product) {\r\n    this.props.actions.removeFromCart(product);\r\n    alertify.error(product.productName + \" silindi\");\r\n  }\r\n  renderEmpty() {\r\n    return (\r\n      <NavItem>\r\n        <NavLink>Bo≈ü</NavLink>\r\n      </NavItem>\r\n    );\r\n  }\r\n  renderSummary() {\r\n    return (\r\n      <UncontrolledDropdown nav inNavbar>\r\n        <DropdownToggle nav caret>\r\n          Liste\r\n        </DropdownToggle>\r\n        <DropdownMenu right>\r\n          {this.props.cart.map(cartItem => (\r\n            <DropdownItem key={cartItem.product.id}>\r\n              <Badge\r\n                color=\"danger\"\r\n                onClick={() => this.removeFromCart(cartItem.product)}\r\n              >\r\n                x{\" \"}\r\n              </Badge>\r\n              {cartItem.product.productName}\r\n              <Badge color=\"success\">{cartItem.quantity}</Badge>\r\n            </DropdownItem>\r\n          ))}\r\n\r\n          <DropdownItem divider />\r\n          <DropdownItem>\r\n            <Link to={\"/cart\"}>Detay</Link>\r\n          </DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.cart.length > 0 ? this.renderSummary() : this.renderEmpty()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      removeFromCart: bindActionCreators(cartActions.removeFromCart, dispatch)\r\n    }\r\n  };\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cart: state.cartReducer\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartSummary);\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n \r\n} from 'reactstrap';\r\nimport CartSummary from '../cart/CartSummary';\r\n\r\nconst Navi = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">kampanya takip</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            \r\n            <CartSummary></CartSummary>\r\n           \r\n          </Nav>\r\n          \r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navi;","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function changeCategory(category) {\r\n  return { type: actionTypes.CHANGE_CATEGORY, payload: category };\r\n}\r\nexport function getCategoriesSuccess(categories) {\r\n  return { type: actionTypes.GET_CATEGORIES_SUCCESS, payload: categories };\r\n}\r\nexport function getCategories() {\r\n  return function(dispatch) {\r\n    let url = \"https://my-json-server.typicode.com/barisekara/coursera4/categories\";\r\n    return fetch(url)\r\n      .then(response => response.json())\r\n      .then(result => dispatch(getCategoriesSuccess(result)));\r\n  };\r\n}\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function getProductsSuccess(products) {\r\n    return { type: actionTypes.GET_PRODUCTS_SUCCESS, payload: products };\r\n  }\r\n  export function getProducts(categoryId) {\r\n    return function(dispatch) {\r\n      let url = \"https://my-json-server.typicode.com/barisekara/coursera4/products\";\r\n      if(categoryId){\r\n        url=url + \"?categoryId=\"+categoryId\r\n      }\r\n      return fetch(url)\r\n        .then(response => response.json())\r\n        .then(result => dispatch(getProductsSuccess(result)));\r\n    };\r\n  }","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as categoryAction from \"../../redux/actions/categoryActions\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\nimport { Badge } from \"reactstrap\";\r\nimport * as productAction from \"../../redux/actions/productActions\";\r\nclass CategoryList extends Component {\r\n  componentDidMount() {\r\n    this.props.actions.getCategories();\r\n  }\r\n\r\n  selectCategory = category => {\r\n    this.props.actions.changeCategory(category);\r\n    this.props.actions.getProducts(category.id)\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <Badge color=\"warning\">Kampanyalar</Badge>\r\n        </h3>\r\n        <ListGroup>\r\n          {this.props.categories.map(category => (\r\n            <ListGroupItem\r\n              active={category.id === this.props.currentCategory.id}\r\n              onClick={() => this.selectCategory(category)}\r\n              key={category.id}\r\n            >\r\n              {category.categoryName}\r\n            </ListGroupItem>\r\n          ))}\r\n        </ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentCategory: state.changeCategoryReducer,\r\n    categories: state.categoryListReducer\r\n  };\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      getCategories: bindActionCreators(categoryAction.getCategories, dispatch),\r\n      changeCategory: bindActionCreators(\r\n        categoryAction.changeCategory,\r\n        dispatch\r\n      ),\r\n      getProducts: bindActionCreators(productAction.getProducts, dispatch)\r\n    }\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryList);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Badge, Button } from \"reactstrap\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as productAction from \"../../redux/actions/productActions\";\r\nimport * as cartActions from \"../../redux/actions/cartActions\";\r\nimport { Table } from \"reactstrap\";\r\nimport alertify from \"alertifyjs\"\r\n\r\nclass ProductList extends Component {\r\n  componentDidMount() {\r\n    this.props.actions.getProducts();\r\n  }\r\n  addToCart = (product)=>{\r\n    this.props.actions.addToCart({quantity:1,product})\r\n    alertify.success(product.productName + \" eklendi\")\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Badge color=\"warning\">Kategori: </Badge>{\" \"}\r\n        <Badge color=\"success\">{this.props.currentCategory.categoryName}</Badge>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Kampanya ƒ∞smi</th>\r\n              <th>Durum</th>\r\n              <th></th>\r\n              <th></th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.products.map(product => (\r\n              <tr key={product.id} >\r\n                <th scope=\"row\">{product.id}</th>\r\n                <td>{product.productName}</td>\r\n                <td>Sona Erdi</td>\r\n                <td></td>\r\n                <td><Button color=\"success\" onClick={()=>this.addToCart(product)} >\r\n                    takip\r\n                  </Button></td>\r\n                <td></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentCategory: state.changeCategoryReducer,\r\n    products: state.productListReducer\r\n  };\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      getProducts: bindActionCreators(productAction.getProducts, dispatch),\r\n      addToCart: bindActionCreators(cartActions.addToCart, dispatch)\r\n    }\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList);\r\n","import React, { Component } from \"react\";\r\nimport {Row,Col} from \"reactstrap\";\r\nimport CategoryList from \"../categories/CategoryList\";\r\nimport ProductList from \"../products/ProductList\";\r\n\r\nexport default class Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col xs=\"3\">\r\n            <CategoryList/>\r\n          </Col>\r\n          <Col xs=\"9\">\r\n            <ProductList />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as cartActions from \"../../redux/actions/cartActions\";\r\nimport { Table, Button, NavItem, NavLink } from \"reactstrap\";\r\nimport alertify from \"alertifyjs\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass CartDetail extends Component {\r\n  removeFromCart(product) {\r\n    this.props.actions.removeFromCart(product);\r\n    alertify.error(product.productName + \"silindi\");\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Product Name</th>\r\n              <th>Durum</th>\r\n              <th></th>\r\n\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.cart.map(cartItem => (\r\n              <tr key={cartItem.product.id}>\r\n                <th scope=\"row\">{cartItem.product.id}</th>\r\n                <td>{cartItem.product.productName}</td>\r\n                <td>Sona Erdi</td>\r\n                <td></td>\r\n                <td>\r\n                \r\n                  <Button\r\n                    color=\"danger\"\r\n                    onClick={() => this.removeFromCart(cartItem.product)}\r\n                  >\r\n                    sil\r\n                  </Button>\r\n\r\n                  &nbsp;\r\n                  <Button \r\n                  color=\"success\"\r\n                  onClick = {()=> window.open(cartItem.product.url,\"_blank\")}\r\n                 \r\n                  \r\n                  >\r\n                     git\r\n                  </Button>\r\n      \r\n\r\n                  \r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      removeFromCart: bindActionCreators(cartActions.removeFromCart, dispatch)\r\n    }\r\n  };\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cart: state.cartReducer\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartDetail);\r\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport Navi from \"../navi/Navi\";\nimport Dashboard from \"./Dashboard\";\nimport { Route,Switch } from \"react-router-dom\";\nimport CartDetail from \"../cart/CartDetail\";\n\nfunction App() {\n  return (\n    <Container>\n      <Navi></Navi>\n      <Switch>\n      <Route path=\"/\" exact component={Dashboard}/> \n      <Route path=\"/product\" exact component={Dashboard}/> \n      <Route path=\"/cart\" exact component={CartDetail}/> \n      </Switch>\n      \n       \n      \n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\r\n  currentCategory: { },\r\n  categories:[],\r\n  products:[],\r\n  cart: []\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport changeCategoryReducer from \"./changeCategoryReducer\";\r\nimport categoryListReducer from \"./categoryListReducer\";\r\nimport productListReducer from \"./productListReducer\";\r\nimport cartReducer from \"./cartReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  changeCategoryReducer,\r\n  categoryListReducer,\r\n  productListReducer,\r\n  cartReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\nexport default function changeCategoryReducer(state = initialState.currentCategory,action) {\r\n  switch (action.type) {\r\n    case actionTypes.CHANGE_CATEGORY:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\nexport default function changeCategoryReducer(state = initialState.categories,action) {\r\n  switch (action.type) {\r\n    case actionTypes.GET_CATEGORIES_SUCCESS:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\nexport default function productListReducer(state = initialState.products,action) {\r\n  switch (action.type) {\r\n    case actionTypes.GET_PRODUCTS_SUCCESS:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function cartReducer(state = initialState.cart, action) {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_TO_CART:\r\n      var addedItem = state.find(\r\n        c => c.product.id === action.payload.product.id\r\n      );\r\n      if (addedItem) {\r\n        var newState = state.map(cartItem => {\r\n          if (cartItem.product.id === action.payload.product.id) {\r\n            return Object.assign({}, addedItem, {\r\n              quantity: addedItem.quantity + 1\r\n            });\r\n          }\r\n          return cartItem;\r\n        });\r\n        return newState;\r\n      } else {\r\n        return [...state, { ...action.payload }];\r\n      }\r\n      case actionTypes.REMOVE_FROM_CART:\r\n        const newState2=state.filter(cartItem=>cartItem.product.id!==action.payload.id)\r\n        return newState2;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/root/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/reducers/configureStore\";\nimport \"alertifyjs/build/css/alertify.min.css\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\nconst store = configureStore();\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./index\";\r\nimport thunk from \"redux-thunk\"\r\n\r\nexport default function configureStore() {\r\n  return createStore(rootReducer,applyMiddleware(thunk));\r\n}\r\n"],"sourceRoot":""}